//
//  TaskGroup.swift
//  SwiftConcurrency
//
//  Created by ÍπÄÎØº on 2023/08/14.
//

import SwiftUI

/*
Task Group
*/

class TaskGroupDataManager {

    /*
     async letÏù¥ 4Î≤àÏù¥ ÏïÑÎãàÎùº, 10Î≤à, 50Î≤àÏù¥ ÎêúÎã§Î©¥ ÌôïÏû•ÏÑ±Ïù¥ Ï¢ãÏßÄ ÏïäÏùå
     */
    func fetchImagesWithAsyncLet() async throws -> [UIImage] {
        async let fetchImage1 = fetchImage(urlString: "https://picsum.photos/200")
        async let fetchImage2 = fetchImage(urlString: "https://picsum.photos/200")
        async let fetchImage3 = fetchImage(urlString: "https://picsum.photos/200")
        async let fetchImage4 = fetchImage(urlString: "https://picsum.photos/200")

        let (image1, image2, image3, image4) = try await (fetchImage1, fetchImage2, fetchImage3, fetchImage4)

        return [image1, image2, image3, image4]
    }

    /*
     Task group ÏÇ¨Ïö©Ìï¥ Î≥¥Í∏∞
     child taskÎäî ÎãπÏó∞Ìûà fetchImage()Ïùº Í≤É
    */
//    func fetchImagesWithTaskGroup() async throws -> [UIImage] {
//        return try await withThrowingTaskGroup(of: UIImage.self) { group in
//            var images: [UIImage] = []
//
//            group.addTask {
//                try await self.fetchImage(urlString: "https://picsum.photos/200")
//            }
//
//            group.addTask {
//                try await self.fetchImage(urlString: "https://picsum.photos/200")
//            }
//
//            group.addTask {
//                try await self.fetchImage(urlString: "https://picsum.photos/200")
//            }
//
//            group.addTask {
//                try await self.fetchImage(urlString: "https://picsum.photos/200")
//            }
//
//            for try await image in group {
//                images.append(image)
//            }
//
//            return images
//        }
//    }

    /*
     Task groupÏùÑ ÏÇ¨Ïö©ÌïòÎäî Ïù¥Ïú† - ÏàòÎèôÏúºÎ°ú ÏûëÏóÖÏùÑ Ï∂îÍ∞ÄÌï† ÌïÑÏöî ÏóÜÏù¥ ÎßéÏùÄ ÏûëÏóÖÏùÑ Ï∂îÍ∞ÄÌï† Ïàò ÏûàÏùå
     */
    func fetchImagesWithTaskGroup() async throws -> [UIImage] {
        let urlStrings = [
            "https://picsum.photos/200",
            "https://picsum.photos/200",
            "https://picsum.photos/200",
            "https://picsum.photos/200",
            "https://picsum.photos/200"
        ]

        return try await withThrowingTaskGroup(of: UIImage?.self) { group in
            var images: [UIImage] = [] // image Í∞úÏàò == urlStrings Í∞úÏàòÏûÑÏùÑ Ïïå Ïàò ÏûàÏùå
            images.reserveCapacity(urlStrings.count) // Ï∂©Î∂ÑÌïú Í≥µÍ∞Ñ ÏòàÏïΩ -> ÏïÑÏ£º ÏïΩÍ∞ÑÏùò ÏÑ±Îä• Ìñ•ÏÉÅ

            for urlString in urlStrings {
                group.addTask {
                    try? await self.fetchImage(urlString: urlString)
                    // Ïã§Ìå®ÌñàÏùÑ Îïå, Ï†ÑÏ≤¥ ÏûëÏóÖ Ïã§Ìå®Î≥¥Îã§ nilÏùÑ Î∞òÌôòÌïòÍ≤å ÌïòÍ∏∞ ÏúÑÌï¥ ÏòµÏÖîÎÑêÎ°ú Î≥ÄÍ≤Ω
                }
            }

            for try await image in group {
                if let image = image {
                    images.append(image)
                }
            }

            return images
        }
    }

    private func fetchImage(urlString: String) async throws -> UIImage {
        guard let url = URL(string: urlString) else { throw URLError(.badURL ) }

        do {
            let (data, _) = try await URLSession.shared.data(from: url, delegate: nil)
            if let image = UIImage(data: data) {
                return image
            } else {
                throw URLError(.badURL)
            }
        } catch {
            throw error
        }
    }
}

class TaskGroupViewModel: ObservableObject {

    @Published var images: [UIImage] = []
    let manager = TaskGroupDataManager()

    func getImages() async {
//        if let images = try? await manager.fetchImagesWithAsyncLet() {
//            self.images.append(contentsOf: images)
//        }

        if let images = try? await manager.fetchImagesWithTaskGroup() {
            self.images.append(contentsOf: images)
        }
    }
}

struct TaskGroup: View {

    @StateObject private var viewModel = TaskGroupViewModel()
    let columns = [GridItem(.flexible()), GridItem(.flexible())]


    var body: some View {
        NavigationView {
            ScrollView {
                LazyVGrid(columns: columns) {
                    ForEach(viewModel.images, id: \.self) { image in
                        Image(uiImage: image)
                            .resizable()
                            .scaledToFit()
                            .frame(height: 150)
                    }
                }
            }
            .navigationTitle("Task Group üê≥")
            .task {
                await viewModel.getImages()
            }
        }
    }
}

struct TaskGroup_Previews: PreviewProvider {
    static var previews: some View {
        TaskGroup()
    }
}
